unit Repositorio.Grupo;

interface

uses
  System.Generics.Collections, RepositorioBase, FireDAC.Comp.Client;

type
  TGrupo = class
  public
    ID: Integer;
    Descricao: string;
  end;

  TRepositorioGrupo = class(TRepositorioBase)
  public
    function ObterTodos: TList<TGrupo>;
    function ObterPorId(AID: Integer): TGrupo;
    function ObterPorNome(ANome: string): TList<TGrupo>;
    procedure Inserir(Grupo: TGrupo);
    procedure Atualizar(Grupo: TGrupo);
    procedure Deletar(AID: Integer);
  end;

implementation

function TRepositorioGrupo.ObterTodos: TList<TGrupo>;
var
  Query: TFDQuery;
  Grupos: TList<TGrupo>;
  Grupo: TGrupo;
begin
  Grupos := TList<TGrupo>.Create;
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FDConn;
    Query.SQL.Text := 'SELECT ID, Descricao FROM Grupo';
    Query.Open;
    while not Query.Eof do
    begin
      Grupo := TGrupo.Create;
      Grupo.ID := Query.FieldByName('ID').AsInteger;
      Grupo.Descricao := Query.FieldByName('Descricao').AsString;
      Grupos.Add(Grupo);
      Query.Next;
    end;
  finally
    Query.Free;
  end;
  Result := Grupos;
end;

function TRepositorioGrupo.ObterPorId(AID: Integer): TGrupo;
var
  Query: TFDQuery;
  Grupo: TGrupo;
begin
  Grupo := nil;
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FDConn;
    Query.SQL.Text := 'SELECT ID, Descricao FROM Grupo WHERE ID = :ID';
    Query.ParamByName('ID').AsInteger := AID;
    Query.Open;
    if not Query.Eof then
    begin
      Grupo := TGrupo.Create;
      Grupo.ID := Query.FieldByName('ID').AsInteger;
      Grupo.Descricao := Query.FieldByName('Descricao').AsString;
    end;
  finally
    Query.Free;
  end;
  Result := Grupo;
end;

function TRepositorioGrupo.ObterPorNome(ANome: string): TList<TGrupo>;
var
  Query: TFDQuery;
  Grupos: TList<TGrupo>;
  Grupo: TGrupo;
begin
  Grupos := TList<TGrupo>.Create;
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FDConn;
    Query.SQL.Text := 'SELECT ID, Descricao FROM Grupo WHERE Descricao LIKE :Nome';
    Query.ParamByName('Nome').AsString := '%' + ANome + '%';
    Query.Open;
    while not Query.Eof do
    begin
      Grupo := TGrupo.Create;
      Grupo.ID := Query.FieldByName('ID').AsInteger;
      Grupo.Descricao := Query.FieldByName('Descricao').AsString;
      Grupos.Add(Grupo);
      Query.Next;
    end;
  finally
    Query.Free;
  end;
  Result := Grupos;
end;

procedure TRepositorioGrupo.Inserir(Grupo: TGrupo);
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FDConn;
    Query.SQL.Text := 'INSERT INTO Grupo (Descricao) VALUES (:Descricao)';
    Query.ParamByName('Descricao').AsString := Grupo.Descricao;
    Query.ExecSQL;
  finally
    Query.Free;
  end;
end;

procedure TRepositorioGrupo.Atualizar(Grupo: TGrupo);
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FDConn;
    Query.SQL.Text := 'UPDATE Grupo SET Descricao = :Descricao WHERE ID = :ID';
    Query.ParamByName('Descricao').AsString := Grupo.Descricao;
    Query.ParamByName('ID').AsInteger := Grupo.ID;
    Query.ExecSQL;
  finally
    Query.Free;
  end;
end;

procedure TRepositorioGrupo.Deletar(AID: Integer);
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FDConn;
    Query.SQL.Text := 'DELETE FROM Grupo WHERE ID = :ID';
    Query.ParamByName('ID').AsInteger := AID;
    Query.ExecSQL;
  finally
    Query.Free;
  end;
end;

end.

