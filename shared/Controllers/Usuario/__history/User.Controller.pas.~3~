unit User.Controller;


interface

uses
  UsuarioService, Usuario;

type
  TUserController = class
  private
    FUserService: TUsuarioService;
  public
    constructor Create;
    destructor Destroy; override;
    function CreateUser(const Usuario: TUsuario): Boolean;
    function EditUser(const User: TUsuario): Boolean;
    function DeleteUser(const UsuarioID: Integer): Boolean;
    function GetUserById(const UsuarioID: Integer): TUsuario;
    function GetAllUsers: TList<TUsuario>;
  end;

implementation

{ TUserController }

constructor TUserController.Create;
begin
  FUserService := TUserService.Create;
end;

destructor TUserController.Destroy;
begin
  FUserService.Free;
  inherited;
end;

function TUserController.CreateUser(const User: TUser): Boolean;
begin
  Result := FUserService.CreateUser(User);
end;

function TUserController.EditUser(const User: TUser): Boolean;
begin
  Result := FUserService.EditUser(User);
end;

function TUserController.DeleteUser(const UserId: Integer): Boolean;
begin
  Result := FUserService.DeleteUser(UserId);
end;

function TUserController.GetUserById(const UserId: Integer): TUser;
begin
  Result := FUserService.GetUserById(UserId);
end;

function TUserController.GetAllUsers: TList<TUser>;
begin
  Result := FUserService.GetAllUsers;
end;

end.

