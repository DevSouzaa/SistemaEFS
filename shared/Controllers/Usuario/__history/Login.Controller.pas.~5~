unit Login.Controller;

interface

uses
  UsuarioService,
  Usuario.model,
  Generics.Collections,
  Empresa.model,
  Sistema.model,
  UFuncoes,
  SysUtils,
  vcl.Forms;

type
  TLoginController = class
  private
    FUsuarioService: TUsuarioService;
    FUsuario:        TUsuario;
  public
    constructor Create;
    destructor Destroy; override;
    function Autenticar(const Login, Senha: string): Boolean;

    function CarregarEmpresas: TList<TEmpresa>;
    function CarregarEmpresaPorId(Id: Integer): TEmpresa; // Método para carregar empresa por ID
    property Usuario: TUsuario read FUsuario;
  end;

implementation

{ TLoginController }


function TLoginController.Autenticar(const Login, Senha: string): Boolean;
var
  Usuario: TUsuario;
begin
  Result := False;
  Usuario := FUsuarioService.Autenticar(Login, Senha);
  if Assigned(Usuario) then
  begin
    Result := TSistema.New.Cryptography.CompareHash(Senha, Usuario.Senha);
    if Result then
      TSistema.New.Usuario := Usuario // Atualiza o usuário no sistema somente se a senha estiver correta
    else
      fnc_CriarMensagem('Erro de Autenticação', 'Senha Incorreta', 'A senha informada está incorreta.', ExtractFilePath(Application.ExeName) + '\Icones\Atencao.png', 'OK');
  end
  else
    fnc_CriarMensagem('Erro de Autenticação', 'Usuário Não Encontrado', 'Usuário não encontrado. Verifique o login informado.', ExtractFilePath(Application.ExeName) + '\Icones\Atencao.png', 'OK');
end;

function TLoginController.CarregarEmpresas: TList<TEmpresa>;
begin
  Result := FUsuarioService.CarregarEmpresas;
end;

function TLoginController.CarregarEmpresaPorId(Id: Integer): TEmpresa;
begin
  Result := FUsuarioService.CarregarEmpresaPorId(Id);
end;

constructor TLoginController.Create;
begin
  FUsuarioService := TUsuarioService.Create;
end;

destructor TLoginController.Destroy;
begin
  FUsuarioService.Free;
  inherited;
end;

end.

