unit UsuarioRepositoryImpl;

interface

uses
  UsuarioRepository, Usuario, Generics.Collections, FireDAC.Comp.Client, Dm.Principal;

type
  TUsuarioRepository = class(TInterfacedObject, IUsuarioRepository)
  public
    function ObterPorId(Id: Integer): TUsuario;
    function ObterPorLogin(Login: string): TUsuario;
    function ObterTodos: TList<TUsuario>;
    function Inserir(Usuario: TUsuario): Boolean;
    function Atualizar(Usuario: TUsuario): Boolean;
    function Deletar(Id: Integer): Boolean;
  end;

implementation

{ TUsuarioRepository }

function TUsuarioRepository.ObterPorId(Id: Integer): TUsuario;
var
  Query: TFDQuery;
  Usuario: TUsuario;
begin
  Query := DMPrincipal.ExecutarQuery(DMPrincipal.QRY_Usuario, 'SELECT * FROM USUARIOS WHERE ID = :ID', [Id]);
  try
    if not Query.Eof then
    begin
      Usuario := TUsuario.Create;
      Usuario.Id := Query.FieldByName('ID').AsInteger;
      Usuario.Nome := Query.FieldByName('NOME').AsString;
      Usuario.Login := Query.FieldByName('LOGIN').AsString;
      Usuario.Senha := Query.FieldByName('SENHA').AsString;
      Usuario.PerfilId := Query.FieldByName('IDPERFIL').AsInteger;
      Result := Usuario;
    end
    else
      Result := nil;
  finally
    Query.Close;
  end;
end;

function TUsuarioRepository.ObterPorLogin(Login: string): TUsuario;
var
  Query: TFDQuery;
  Usuario: TUsuario;
begin
  Query := DMPrincipal.ExecutarQuery(DMPrincipal.QRY_Usuario, 'SELECT * FROM USUARIOS WHERE LOGIN = :LOGIN', [Login]);
  try
    if not Query.Eof then
    begin
      Usuario := TUsuario.Create;
      Usuario.Id := Query.FieldByName('ID').AsInteger;
      Usuario.Nome := Query.FieldByName('NOME').AsString;
      Usuario.Login := Query.FieldByName('LOGIN').AsString;
      Usuario.Senha := Query.FieldByName('SENHA').AsString;
      Usuario.PerfilId := Query.FieldByName('IDPERFIL').AsInteger;
      Result := Usuario;
    end
    else
      Result := nil;
  finally
    Query.Close;
  end;
end;

function TUsuarioRepository.ObterTodos: TList<TUsuario>;
var
  Query: TFDQuery;
  Usuarios: TList<TUsuario>;
  Usuario: TUsuario;
begin
  Usuarios := TList<TUsuario>.Create;
  Query := DMPrincipal.ExecutarQuery(DMPrincipal.QRY_Usuario, 'SELECT * FROM USUARIOS', []);
  try
    while not Query.Eof do
    begin
      Usuario := TUsuario.Create;
      Usuario.Id := Query.FieldByName('ID').AsInteger;
      Usuario.Nome := Query.FieldByName('NOME').AsString;
      Usuario.Login := Query.FieldByName('LOGIN').AsString;
      Usuario.Senha := Query.FieldByName('SENHA').AsString;
      Usuario.PerfilId := Query.FieldByName('IDPERFIL').AsInteger;
      Usuarios.Add(Usuario);
      Query.Next;
    end;
    Result := Usuarios;
  finally
    Query.Close;
  end;
end;

function TUsuarioRepository.Inserir(Usuario: TUsuario): Boolean;
var
  Query: TFDQuery;
begin
  Query := DMPrincipal.ExecutarQuery(DMPrincipal.QRY_Usuario, 'INSERT INTO USUARIOS (NOME, LOGIN, SENHA, IDPERFIL) VALUES (:NOME, :LOGIN, :SENHA, :IDPERFIL)', []);
  try
    Query.ParamByName('NOME').AsString := Usuario.Nome;
    Query.ParamByName('LOGIN').AsString := Usuario.Login;
    Query.ParamByName('SENHA').AsString := Usuario.Senha;
    Query.ParamByName('IDPERFIL').AsInteger := Usuario.PerfilId;
    Query.ExecSQL;
    Result := True;
  finally
    Query.Close;
  end;
end;

function TUsuarioRepository.Atualizar(Usuario: TUsuario): Boolean;
var
  Query: TFDQuery;
begin
  Query := DMPrincipal.ExecutarQuery(DMPrincipal.QRY_Usuario, 'UPDATE USUARIOS SET NOME = :NOME, LOGIN = :LOGIN, SENHA = :SENHA, IDPERFIL = :IDPERFIL WHERE ID = :ID', []);
  try
    Query.ParamByName('ID').AsInteger := Usuario.Id;
    Query.ParamByName('NOME').AsString := Usuario.Nome;
    Query.ParamByName('LOGIN').AsString := Usuario.Login;
    Query.ParamByName('SENHA').AsString := Usuario.Senha;
    Query.ParamByName('IDPERFIL').AsInteger := Usuario.PerfilId;
    Query.ExecSQL;
    Result := True;
  finally
    Query.Close;
  end;
end;

function TUsuarioRepository.Deletar(Id: Integer): Boolean;
var
  Query: TFDQuery;
begin
  Query := DMPrincipal.ExecutarQuery(DMPrincipal.QRY_Usuario, 'DELETE FROM USUARIOS WHERE ID = :ID', [Id]);
  try
    Query.ExecSQL;
    Result := True;
  finally
    Query.Close;
  end;
end;

end.

