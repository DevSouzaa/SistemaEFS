unit Service.usuario;

interface

uses
  Usuario, Acesso, SysUtils, Generics.Collections, Enums, Repositorio.Usuario;

type
  TServiceUsuario = class
  private
    FRepositorioUsuario: TRepositorioUsuario;
    function CarregarAcessos(IDPerfil: Integer): TList<TAcesso>;
  public
    constructor Create;
    function Autenticar(Login, Senha: string): TUsuario;
    function TemPermissao(Usuario: TUsuario; AcaoId: Integer; Permissao: TAcaoUser): Boolean;
    function SalvarUsuario(Usuario: TUsuario): Boolean;
    function CarregarUsuarios: TList<TUsuario>;
    function CarregarUsuarioPorId(Id: Integer): TUsuario;
    function CarregarUsuariosPorNome(Nome: String): TList<TUsuario>;
    function DeletarUsuario(Id: Integer): Boolean;
  end;

implementation

{ TUsuarioService }

constructor TServiceUsuario.Create;
begin
  FRepositorioUsuario := TRepositorioUsuario.Create;
end;

function TServiceUsuario.CarregarAcessos(IDPerfil: Integer): TList<TAcesso>;
begin
  // Implementar a lógica para carregar acessos
end;

function TServiceUsuario.Autenticar(Login, Senha: string): TUsuario;
var
  Usuario: TUsuario;
begin
  Usuario := FRepositorioUsuario.ObterPorLogin(Login);
  if Assigned(Usuario) then
    Result := Usuario
  else
    Result := nil;
end;

function TServiceUsuario.TemPermissao(Usuario: TUsuario; AcaoId: Integer; Permissao: TAcaoUser): Boolean;
var
  Acessos: TList<TAcesso>;
  Acesso: TAcesso;
begin
//  if not Assigned(Usuario) then
//    raise Exception.Create('Usuário não pode ser nulo.');
//
//  Acessos := CarregarAcessos(Usuario.PerfilId);
//  try
//    for Acesso in Acessos do
//    begin
//      if Acesso.AcaoId = AcaoId then
//      begin
//        case Permissao of
//          AcUInserir: Result := Acesso.Inserir;
//          AcUAlterar: Result := Acesso.Alterar;
//          AcUExcluir: Result := Acesso.Excluir;
//          AcUListar: Result := Acesso.Listar;
//        end;
//        Exit(True);
//      end;
//    end;
//    Result := False;
//  finally
//    Acessos.Free;
//  end;
end;

function TServiceUsuario.SalvarUsuario(Usuario: TUsuario): Boolean;
begin
  if Usuario.Id = 0 then
    Result := FRepositorioUsuario.Inserir(Usuario)
  else
    Result := FRepositorioUsuario.Atualizar(Usuario);
end;

function TServiceUsuario.CarregarUsuarios: TList<TUsuario>;
begin
  Result := FRepositorioUsuario.ObterTodos;
end;

function TServiceUsuario.CarregarUsuariosPorNome(Nome: String): TList<TUsuario>;
begin
  Result := FRepositorioUsuario.ObterPorNome(Nome);
end;

function TServiceUsuario.CarregarUsuarioPorId(Id: Integer): TUsuario;
begin
  Result := FRepositorioUsuario.ObterPorId(Id);
end;



function TServiceUsuario.DeletarUsuario(Id: Integer): Boolean;
begin
  Result := FRepositorioUsuario.Deletar(Id);
end;

end.

