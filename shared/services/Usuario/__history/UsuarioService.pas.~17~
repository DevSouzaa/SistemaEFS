unit UsuarioService;

interface

uses
  Usuario, Acesso, SysUtils, Generics.Collections, Enums, Dm.Principal, FireDAC.Comp.Client, Empresa;

type
  TUsuarioService = class
  private
    function CarregarAcessos(IDPerfil: Integer): TList<TAcesso>;
  public
    function Autenticar(Login, Senha: string): TUsuario;
    function TemPermissao(Usuario: TUsuario; AcaoId: Integer; Permissao: TAcaoUser): Boolean;
    function SalvarUsuario(Usuario: TUsuario): Boolean;
  end;

implementation

{ TUsuarioService }

function TUsuarioService.CarregarAcessos(IDPerfil: Integer): TList<TAcesso>;
var
  Query: TFDQuery;
  Acessos: TList<TAcesso>;
  Acesso: TAcesso;
begin
  Acessos := TList<TAcesso>.Create;

  if IDPerfil = 0 then
    raise Exception.Create('IDPerfil não pode ser zero.');

  Query := DmPrincipal.ExecutarQuery(DmPrincipal.QRY_Acesso, 'SELECT * FROM ACESSOS WHERE IDPERFIL = :IDPERFIL', [IDPerfil]);
  try
    while not Query.Eof do
    begin
      Acesso := TAcesso.Create;
      Acesso.Id := Query.FieldByName('IDACESSOS').AsInteger;
      Acesso.PerfilId := Query.FieldByName('IDPERFIL').AsInteger;
      Acesso.AcaoId := Query.FieldByName('IDACAO').AsInteger;
      Acesso.Inserir := Query.FieldByName('INSERIR').AsBoolean;
      Acesso.Alterar := Query.FieldByName('ALTERAR').AsBoolean;
      Acesso.Excluir := Query.FieldByName('EXCLUIR').AsBoolean;
      Acesso.Listar := Query.FieldByName('LISTAR').AsBoolean;
      Acessos.Add(Acesso);
      Query.Next;
    end;
  finally
    Query.Close;
  end;
  Result := Acessos;
end;

function TUsuarioService.Autenticar(Login, Senha: string): TUsuario;
var
  Query: TFDQuery;
  Usuario: TUsuario;
begin
  Query := DmPrincipal.ExecutarQuery(DmPrincipal.QRY_Usuario, 'SELECT * FROM USUARIOS WHERE LOGIN = :LOGIN', [Login]);
  try
    if not Query.Eof then
    begin
      Usuario := TUsuario.Create;
      Usuario.Id := Query.FieldByName('ID').AsInteger;
      Usuario.Nome := Query.FieldByName('NOME').AsString;
      Usuario.Login := Query.FieldByName('LOGIN').AsString;
      Usuario.Senha := Query.FieldByName('SENHA').AsString;
      Usuario.PerfilId := Query.FieldByName('IDPERFIL').AsInteger;
      Result := Usuario;
    end
    else
      Result := nil;
  finally
    Query.Close;
  end;
end;

function TUsuarioService.TemPermissao(Usuario: TUsuario; AcaoId: Integer; Permissao: TAcaoUser): Boolean;
var
  Acessos: TList<TAcesso>;
  Acesso: TAcesso;
begin
  if not Assigned(Usuario) then
    raise Exception.Create('Usuário não pode ser nulo.');

  Acessos := CarregarAcessos(Usuario.PerfilId);
  try
    for Acesso in Acessos do
    begin
      if Acesso.AcaoId = AcaoId then
      begin
        case Permissao of
          AcUInserir: Result := Acesso.Inserir;
          AcUAlterar: Result := Acesso.Alterar;
          AcUExcluir: Result := Acesso.Excluir;
          AcUListar: Result := Acesso.Listar;
        end;
        Exit(True);
      end;
    end;
    Result := False;
  finally
    Acessos.Free;
  end;
end;

function TUsuarioService.SalvarUsuario(Usuario: TUsuario): Boolean;
var
  Query: TFDQuery;
begin
  Query := DmPrincipal.ExecutarQuery(DmPrincipal.QRY_Usuario, 'INSERT INTO USUARIOS (NOME, LOGIN, SENHA, IDPERFIL) VALUES (:NOME, :LOGIN, :SENHA, :IDPERFIL)', []);
  try
    Query.ParamByName('NOME').AsString := Usuario.Nome;
    Query.ParamByName('LOGIN').AsString := Usuario.Login;
    Query.ParamByName('SENHA').AsString := Usuario.Senha;
    Query.ParamByName('IDPERFIL').AsInteger := Usuario.PerfilId;
    Query.ExecSQL;
    Result := True;
  finally
    Query.Close;
  end;
end;

end.

