unit ConfigFiscal;

interface

uses
  ConfigCertificado, ConfigGeral, ConfigDanfe, ConfigDiversos, ConfigPosPrinter, ConfigProxy, ConfigWebService, System.SysUtils;

type
  TConfigFiscal = class
  private
    class var FInstance: TConfigFiscal;
    FConfigCertificado: TConfigCertificado;
    FConfigGeral: TConfigGeral;
    FConfigDanfe: TConfigDanfe;
    FConfigDiversos: TConfigDiversos;
    FConfigPosPrinter: TConfigPosPrinter;
    FConfigProxy: TConfigProxy;
    FConfigWebService: TConfigWebService;

    constructor Create;
  public
    class function GetInstance: TConfigFiscal;
    procedure LoadConfigurations;
    procedure SaveConfigurations;

    property ConfigCertificado: TConfigCertificado read FConfigCertificado;
    property ConfigGeral: TConfigGeral read FConfigGeral;
    property ConfigDanfe: TConfigDanfe read FConfigDanfe;
    property ConfigDiversos: TConfigDiversos read FConfigDiversos;
    property ConfigPosPrinter: TConfigPosPrinter read FConfigPosPrinter;
    property ConfigProxy: TConfigProxy read FConfigProxy;
    property ConfigWebService: TConfigWebService read FConfigWebService;
  end;

implementation

{ TConfigFiscal }

constructor TConfigFiscal.Create;
begin
  FConfigCertificado := TConfigCertificado.Create;
  FConfigGeral := TConfigGeral.Create;
  FConfigDanfe := TConfigDanfe.Create;
  FConfigDiversos := TConfigDiversos.Create;
  FConfigPosPrinter := TConfigPosPrinter.Create;
  FConfigProxy := TConfigProxy.Create;
  FConfigWebService := TConfigWebService.Create;
end;

class function TConfigFiscal.GetInstance: TConfigFiscal;
begin
  if not Assigned(FInstance) then
  begin
    FInstance := TConfigFiscal.Create;
  end;
  Result := FInstance;
end;

procedure TConfigFiscal.LoadConfigurations;
begin
  // Implementar o código para carregar as configurações de um arquivo, banco de dados, etc.
end;

procedure TConfigFiscal.SaveConfigurations;
begin
  // Implementar o código para salvar as configurações em um arquivo, banco de dados, etc.
end;

end.

